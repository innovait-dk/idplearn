### YamlMime:ManagedReference
items:
- uid: Innova.Data.Validation.AccountExistsValidator`2
  commentId: T:Innova.Data.Validation.AccountExistsValidator`2
  id: AccountExistsValidator`2
  parent: Innova.Data.Validation
  children:
  - Innova.Data.Validation.AccountExistsValidator`2.GetDefaultMessageTemplate(System.String)
  - Innova.Data.Validation.AccountExistsValidator`2.IsValid(FluentValidation.ValidationContext{`0},`1)
  - Innova.Data.Validation.AccountExistsValidator`2.Name
  langs:
  - csharp
  - vb
  name: AccountExistsValidator<T, TProperty>
  nameWithType: AccountExistsValidator<T, TProperty>
  fullName: Innova.Data.Validation.AccountExistsValidator<T, TProperty>
  type: Class
  source:
    id: AccountExistsValidator
    path: C:\Source\Workspaces\Workspace\Innova Frameworks\IDP\src\Innova.Data\Validation\AccountExistsValidator.cs
    startLine: 11
  assemblies:
  - Innova.Data
  namespace: Innova.Data.Validation
  summary: Validator that checks if an account exists in Active Directory.
  example: []
  syntax:
    content: 'public class AccountExistsValidator<T, TProperty> : PropertyValidator<T, TProperty>, IPropertyValidator<T, TProperty>, IPropertyValidator'
    typeParameters:
    - id: T
      description: The type of the object being validated.
    - id: TProperty
      description: The type of the property being validated.
    content.vb: Public Class AccountExistsValidator(Of T, TProperty) Inherits PropertyValidator(Of T, TProperty) Implements IPropertyValidator(Of T, TProperty), IPropertyValidator
  inheritance:
  - System.Object
  - FluentValidation.Validators.PropertyValidator{{T},{TProperty}}
  implements:
  - FluentValidation.Validators.IPropertyValidator{{T},{TProperty}}
  - FluentValidation.Validators.IPropertyValidator
  inheritedMembers:
  - FluentValidation.Validators.PropertyValidator{{T},{TProperty}}.GetDefaultMessageTemplate(System.String)
  - FluentValidation.Validators.PropertyValidator{{T},{TProperty}}.Localized(System.String,System.String)
  - FluentValidation.Validators.PropertyValidator{{T},{TProperty}}.IsValid(FluentValidation.ValidationContext{{T}},{TProperty})
  - FluentValidation.Validators.PropertyValidator{{T},{TProperty}}.Name
  nameWithType.vb: AccountExistsValidator(Of T, TProperty)
  fullName.vb: Innova.Data.Validation.AccountExistsValidator(Of T, TProperty)
  name.vb: AccountExistsValidator(Of T, TProperty)
- uid: Innova.Data.Validation.AccountExistsValidator`2.Name
  commentId: P:Innova.Data.Validation.AccountExistsValidator`2.Name
  id: Name
  parent: Innova.Data.Validation.AccountExistsValidator`2
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: AccountExistsValidator<T, TProperty>.Name
  fullName: Innova.Data.Validation.AccountExistsValidator<T, TProperty>.Name
  type: Property
  source:
    id: Name
    path: C:\Source\Workspaces\Workspace\Innova Frameworks\IDP\src\Innova.Data\Validation\AccountExistsValidator.cs
    startLine: 16
  assemblies:
  - Innova.Data
  namespace: Innova.Data.Validation
  summary: Gets the name of the validator.
  example: []
  syntax:
    content: public override string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overrides ReadOnly Property Name As String
  overridden: FluentValidation.Validators.PropertyValidator{{T},{TProperty}}.Name
  overload: Innova.Data.Validation.AccountExistsValidator`2.Name*
  nameWithType.vb: AccountExistsValidator(Of T, TProperty).Name
  fullName.vb: Innova.Data.Validation.AccountExistsValidator(Of T, TProperty).Name
- uid: Innova.Data.Validation.AccountExistsValidator`2.GetDefaultMessageTemplate(System.String)
  commentId: M:Innova.Data.Validation.AccountExistsValidator`2.GetDefaultMessageTemplate(System.String)
  id: GetDefaultMessageTemplate(System.String)
  parent: Innova.Data.Validation.AccountExistsValidator`2
  langs:
  - csharp
  - vb
  name: GetDefaultMessageTemplate(string)
  nameWithType: AccountExistsValidator<T, TProperty>.GetDefaultMessageTemplate(string)
  fullName: Innova.Data.Validation.AccountExistsValidator<T, TProperty>.GetDefaultMessageTemplate(string)
  type: Method
  source:
    id: GetDefaultMessageTemplate
    path: C:\Source\Workspaces\Workspace\Innova Frameworks\IDP\src\Innova.Data\Validation\AccountExistsValidator.cs
    startLine: 23
  assemblies:
  - Innova.Data
  namespace: Innova.Data.Validation
  summary: Gets the default error message template.
  example: []
  syntax:
    content: protected override string GetDefaultMessageTemplate(string errorCode)
    parameters:
    - id: errorCode
      type: System.String
      description: The error code.
    return:
      type: System.String
      description: The default error message template.
    content.vb: Protected Overrides Function GetDefaultMessageTemplate(errorCode As String) As String
  overridden: FluentValidation.Validators.PropertyValidator{{T},{TProperty}}.GetDefaultMessageTemplate(System.String)
  overload: Innova.Data.Validation.AccountExistsValidator`2.GetDefaultMessageTemplate*
  nameWithType.vb: AccountExistsValidator(Of T, TProperty).GetDefaultMessageTemplate(String)
  fullName.vb: Innova.Data.Validation.AccountExistsValidator(Of T, TProperty).GetDefaultMessageTemplate(String)
  name.vb: GetDefaultMessageTemplate(String)
- uid: Innova.Data.Validation.AccountExistsValidator`2.IsValid(FluentValidation.ValidationContext{`0},`1)
  commentId: M:Innova.Data.Validation.AccountExistsValidator`2.IsValid(FluentValidation.ValidationContext{`0},`1)
  id: IsValid(FluentValidation.ValidationContext{`0},`1)
  parent: Innova.Data.Validation.AccountExistsValidator`2
  langs:
  - csharp
  - vb
  name: IsValid(ValidationContext<T>, TProperty)
  nameWithType: AccountExistsValidator<T, TProperty>.IsValid(ValidationContext<T>, TProperty)
  fullName: Innova.Data.Validation.AccountExistsValidator<T, TProperty>.IsValid(FluentValidation.ValidationContext<T>, TProperty)
  type: Method
  source:
    id: IsValid
    path: C:\Source\Workspaces\Workspace\Innova Frameworks\IDP\src\Innova.Data\Validation\AccountExistsValidator.cs
    startLine: 31
  assemblies:
  - Innova.Data
  namespace: Innova.Data.Validation
  summary: Determines whether the specified value is valid.
  example: []
  syntax:
    content: public override bool IsValid(ValidationContext<T> context, TProperty value)
    parameters:
    - id: context
      type: FluentValidation.ValidationContext{{T}}
      description: The validation context.
    - id: value
      type: '{TProperty}'
      description: The value to validate.
    return:
      type: System.Boolean
      description: <code>true</code> if the value is valid; otherwise, <code>false</code>.
    content.vb: Public Overrides Function IsValid(context As ValidationContext(Of T), value As TProperty) As Boolean
  overridden: FluentValidation.Validators.PropertyValidator{{T},{TProperty}}.IsValid(FluentValidation.ValidationContext{{T}},{TProperty})
  overload: Innova.Data.Validation.AccountExistsValidator`2.IsValid*
  nameWithType.vb: AccountExistsValidator(Of T, TProperty).IsValid(ValidationContext(Of T), TProperty)
  fullName.vb: Innova.Data.Validation.AccountExistsValidator(Of T, TProperty).IsValid(FluentValidation.ValidationContext(Of T), TProperty)
  name.vb: IsValid(ValidationContext(Of T), TProperty)
references:
- uid: Innova.Data.Validation
  commentId: N:Innova.Data.Validation
  href: Innova.html
  name: Innova.Data.Validation
  nameWithType: Innova.Data.Validation
  fullName: Innova.Data.Validation
  spec.csharp:
  - uid: Innova
    name: Innova
    href: Innova.html
  - name: .
  - uid: Innova.Data
    name: Data
    href: Innova.Data.html
  - name: .
  - uid: Innova.Data.Validation
    name: Validation
    href: Innova.Data.Validation.html
  spec.vb:
  - uid: Innova
    name: Innova
    href: Innova.html
  - name: .
  - uid: Innova.Data
    name: Data
    href: Innova.Data.html
  - name: .
  - uid: Innova.Data.Validation
    name: Validation
    href: Innova.Data.Validation.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: FluentValidation.Validators.PropertyValidator{{T},{TProperty}}
  commentId: T:FluentValidation.Validators.PropertyValidator{`0,`1}
  parent: FluentValidation.Validators
  definition: FluentValidation.Validators.PropertyValidator`2
  name: PropertyValidator<T, TProperty>
  nameWithType: PropertyValidator<T, TProperty>
  fullName: FluentValidation.Validators.PropertyValidator<T, TProperty>
  nameWithType.vb: PropertyValidator(Of T, TProperty)
  fullName.vb: FluentValidation.Validators.PropertyValidator(Of T, TProperty)
  name.vb: PropertyValidator(Of T, TProperty)
  spec.csharp:
  - uid: FluentValidation.Validators.PropertyValidator`2
    name: PropertyValidator
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TProperty
  - name: '>'
  spec.vb:
  - uid: FluentValidation.Validators.PropertyValidator`2
    name: PropertyValidator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TProperty
  - name: )
- uid: FluentValidation.Validators.IPropertyValidator{{T},{TProperty}}
  commentId: T:FluentValidation.Validators.IPropertyValidator{`0,`1}
  parent: FluentValidation.Validators
  definition: FluentValidation.Validators.IPropertyValidator`2
  name: IPropertyValidator<T, TProperty>
  nameWithType: IPropertyValidator<T, TProperty>
  fullName: FluentValidation.Validators.IPropertyValidator<T, TProperty>
  nameWithType.vb: IPropertyValidator(Of T, TProperty)
  fullName.vb: FluentValidation.Validators.IPropertyValidator(Of T, TProperty)
  name.vb: IPropertyValidator(Of T, TProperty)
  spec.csharp:
  - uid: FluentValidation.Validators.IPropertyValidator`2
    name: IPropertyValidator
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TProperty
  - name: '>'
  spec.vb:
  - uid: FluentValidation.Validators.IPropertyValidator`2
    name: IPropertyValidator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TProperty
  - name: )
- uid: FluentValidation.Validators.IPropertyValidator
  commentId: T:FluentValidation.Validators.IPropertyValidator
  parent: FluentValidation.Validators
  isExternal: true
  name: IPropertyValidator
  nameWithType: IPropertyValidator
  fullName: FluentValidation.Validators.IPropertyValidator
- uid: FluentValidation.Validators.PropertyValidator{{T},{TProperty}}.GetDefaultMessageTemplate(System.String)
  commentId: M:FluentValidation.Validators.PropertyValidator{`0,`1}.GetDefaultMessageTemplate(System.String)
  parent: FluentValidation.Validators.PropertyValidator{{T},{TProperty}}
  definition: FluentValidation.Validators.PropertyValidator`2.GetDefaultMessageTemplate(System.String)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetDefaultMessageTemplate(string)
  nameWithType: PropertyValidator<T, TProperty>.GetDefaultMessageTemplate(string)
  fullName: FluentValidation.Validators.PropertyValidator<T, TProperty>.GetDefaultMessageTemplate(string)
  nameWithType.vb: PropertyValidator(Of T, TProperty).GetDefaultMessageTemplate(String)
  fullName.vb: FluentValidation.Validators.PropertyValidator(Of T, TProperty).GetDefaultMessageTemplate(String)
  name.vb: GetDefaultMessageTemplate(String)
  spec.csharp:
  - uid: FluentValidation.Validators.PropertyValidator{`0,`1}.GetDefaultMessageTemplate(System.String)
    name: GetDefaultMessageTemplate
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: FluentValidation.Validators.PropertyValidator{`0,`1}.GetDefaultMessageTemplate(System.String)
    name: GetDefaultMessageTemplate
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: FluentValidation.Validators.PropertyValidator{{T},{TProperty}}.Localized(System.String,System.String)
  commentId: M:FluentValidation.Validators.PropertyValidator{`0,`1}.Localized(System.String,System.String)
  parent: FluentValidation.Validators.PropertyValidator{{T},{TProperty}}
  definition: FluentValidation.Validators.PropertyValidator`2.Localized(System.String,System.String)
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: Localized(string, string)
  nameWithType: PropertyValidator<T, TProperty>.Localized(string, string)
  fullName: FluentValidation.Validators.PropertyValidator<T, TProperty>.Localized(string, string)
  nameWithType.vb: PropertyValidator(Of T, TProperty).Localized(String, String)
  fullName.vb: FluentValidation.Validators.PropertyValidator(Of T, TProperty).Localized(String, String)
  name.vb: Localized(String, String)
  spec.csharp:
  - uid: FluentValidation.Validators.PropertyValidator{`0,`1}.Localized(System.String,System.String)
    name: Localized
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: FluentValidation.Validators.PropertyValidator{`0,`1}.Localized(System.String,System.String)
    name: Localized
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: FluentValidation.Validators.PropertyValidator{{T},{TProperty}}.IsValid(FluentValidation.ValidationContext{{T}},{TProperty})
  commentId: M:FluentValidation.Validators.PropertyValidator{`0,`1}.IsValid(FluentValidation.ValidationContext{`0},`1)
  parent: FluentValidation.Validators.PropertyValidator{{T},{TProperty}}
  definition: FluentValidation.Validators.PropertyValidator`2.IsValid(FluentValidation.ValidationContext{`0},`1)
  name: IsValid(ValidationContext<T>, TProperty)
  nameWithType: PropertyValidator<T, TProperty>.IsValid(ValidationContext<T>, TProperty)
  fullName: FluentValidation.Validators.PropertyValidator<T, TProperty>.IsValid(FluentValidation.ValidationContext<T>, TProperty)
  nameWithType.vb: PropertyValidator(Of T, TProperty).IsValid(ValidationContext(Of T), TProperty)
  fullName.vb: FluentValidation.Validators.PropertyValidator(Of T, TProperty).IsValid(FluentValidation.ValidationContext(Of T), TProperty)
  name.vb: IsValid(ValidationContext(Of T), TProperty)
  spec.csharp:
  - uid: FluentValidation.Validators.PropertyValidator{`0,`1}.IsValid(FluentValidation.ValidationContext{`0},`1)
    name: IsValid
    isExternal: true
  - name: (
  - uid: FluentValidation.ValidationContext`1
    name: ValidationContext
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - name: TProperty
  - name: )
  spec.vb:
  - uid: FluentValidation.Validators.PropertyValidator{`0,`1}.IsValid(FluentValidation.ValidationContext{`0},`1)
    name: IsValid
    isExternal: true
  - name: (
  - uid: FluentValidation.ValidationContext`1
    name: ValidationContext
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - name: TProperty
  - name: )
- uid: FluentValidation.Validators.PropertyValidator{{T},{TProperty}}.Name
  commentId: P:FluentValidation.Validators.PropertyValidator{`0,`1}.Name
  parent: FluentValidation.Validators.PropertyValidator{{T},{TProperty}}
  definition: FluentValidation.Validators.PropertyValidator`2.Name
  name: Name
  nameWithType: PropertyValidator<T, TProperty>.Name
  fullName: FluentValidation.Validators.PropertyValidator<T, TProperty>.Name
  nameWithType.vb: PropertyValidator(Of T, TProperty).Name
  fullName.vb: FluentValidation.Validators.PropertyValidator(Of T, TProperty).Name
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: FluentValidation.Validators.PropertyValidator`2
  commentId: T:FluentValidation.Validators.PropertyValidator`2
  isExternal: true
  name: PropertyValidator<T, TProperty>
  nameWithType: PropertyValidator<T, TProperty>
  fullName: FluentValidation.Validators.PropertyValidator<T, TProperty>
  nameWithType.vb: PropertyValidator(Of T, TProperty)
  fullName.vb: FluentValidation.Validators.PropertyValidator(Of T, TProperty)
  name.vb: PropertyValidator(Of T, TProperty)
  spec.csharp:
  - uid: FluentValidation.Validators.PropertyValidator`2
    name: PropertyValidator
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TProperty
  - name: '>'
  spec.vb:
  - uid: FluentValidation.Validators.PropertyValidator`2
    name: PropertyValidator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TProperty
  - name: )
- uid: FluentValidation.Validators
  commentId: N:FluentValidation.Validators
  isExternal: true
  name: FluentValidation.Validators
  nameWithType: FluentValidation.Validators
  fullName: FluentValidation.Validators
  spec.csharp:
  - uid: FluentValidation
    name: FluentValidation
    isExternal: true
  - name: .
  - uid: FluentValidation.Validators
    name: Validators
    isExternal: true
  spec.vb:
  - uid: FluentValidation
    name: FluentValidation
    isExternal: true
  - name: .
  - uid: FluentValidation.Validators
    name: Validators
    isExternal: true
- uid: FluentValidation.Validators.IPropertyValidator`2
  commentId: T:FluentValidation.Validators.IPropertyValidator`2
  isExternal: true
  name: IPropertyValidator<T, TProperty>
  nameWithType: IPropertyValidator<T, TProperty>
  fullName: FluentValidation.Validators.IPropertyValidator<T, TProperty>
  nameWithType.vb: IPropertyValidator(Of T, TProperty)
  fullName.vb: FluentValidation.Validators.IPropertyValidator(Of T, TProperty)
  name.vb: IPropertyValidator(Of T, TProperty)
  spec.csharp:
  - uid: FluentValidation.Validators.IPropertyValidator`2
    name: IPropertyValidator
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TProperty
  - name: '>'
  spec.vb:
  - uid: FluentValidation.Validators.IPropertyValidator`2
    name: IPropertyValidator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TProperty
  - name: )
- uid: FluentValidation.Validators.PropertyValidator`2.GetDefaultMessageTemplate(System.String)
  commentId: M:FluentValidation.Validators.PropertyValidator`2.GetDefaultMessageTemplate(System.String)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: GetDefaultMessageTemplate(string)
  nameWithType: PropertyValidator<T, TProperty>.GetDefaultMessageTemplate(string)
  fullName: FluentValidation.Validators.PropertyValidator<T, TProperty>.GetDefaultMessageTemplate(string)
  nameWithType.vb: PropertyValidator(Of T, TProperty).GetDefaultMessageTemplate(String)
  fullName.vb: FluentValidation.Validators.PropertyValidator(Of T, TProperty).GetDefaultMessageTemplate(String)
  name.vb: GetDefaultMessageTemplate(String)
  spec.csharp:
  - uid: FluentValidation.Validators.PropertyValidator`2.GetDefaultMessageTemplate(System.String)
    name: GetDefaultMessageTemplate
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: FluentValidation.Validators.PropertyValidator`2.GetDefaultMessageTemplate(System.String)
    name: GetDefaultMessageTemplate
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: FluentValidation.Validators.PropertyValidator`2.Localized(System.String,System.String)
  commentId: M:FluentValidation.Validators.PropertyValidator`2.Localized(System.String,System.String)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: Localized(string, string)
  nameWithType: PropertyValidator<T, TProperty>.Localized(string, string)
  fullName: FluentValidation.Validators.PropertyValidator<T, TProperty>.Localized(string, string)
  nameWithType.vb: PropertyValidator(Of T, TProperty).Localized(String, String)
  fullName.vb: FluentValidation.Validators.PropertyValidator(Of T, TProperty).Localized(String, String)
  name.vb: Localized(String, String)
  spec.csharp:
  - uid: FluentValidation.Validators.PropertyValidator`2.Localized(System.String,System.String)
    name: Localized
    isExternal: true
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: FluentValidation.Validators.PropertyValidator`2.Localized(System.String,System.String)
    name: Localized
    isExternal: true
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: FluentValidation.Validators.PropertyValidator`2.IsValid(FluentValidation.ValidationContext{`0},`1)
  commentId: M:FluentValidation.Validators.PropertyValidator`2.IsValid(FluentValidation.ValidationContext{`0},`1)
  isExternal: true
  name: IsValid(ValidationContext<T>, TProperty)
  nameWithType: PropertyValidator<T, TProperty>.IsValid(ValidationContext<T>, TProperty)
  fullName: FluentValidation.Validators.PropertyValidator<T, TProperty>.IsValid(FluentValidation.ValidationContext<T>, TProperty)
  nameWithType.vb: PropertyValidator(Of T, TProperty).IsValid(ValidationContext(Of T), TProperty)
  fullName.vb: FluentValidation.Validators.PropertyValidator(Of T, TProperty).IsValid(FluentValidation.ValidationContext(Of T), TProperty)
  name.vb: IsValid(ValidationContext(Of T), TProperty)
  spec.csharp:
  - uid: FluentValidation.Validators.PropertyValidator`2.IsValid(FluentValidation.ValidationContext{`0},`1)
    name: IsValid
    isExternal: true
  - name: (
  - uid: FluentValidation.ValidationContext`1
    name: ValidationContext
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - name: TProperty
  - name: )
  spec.vb:
  - uid: FluentValidation.Validators.PropertyValidator`2.IsValid(FluentValidation.ValidationContext{`0},`1)
    name: IsValid
    isExternal: true
  - name: (
  - uid: FluentValidation.ValidationContext`1
    name: ValidationContext
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - name: TProperty
  - name: )
- uid: FluentValidation.Validators.PropertyValidator`2.Name
  commentId: P:FluentValidation.Validators.PropertyValidator`2.Name
  isExternal: true
  name: Name
  nameWithType: PropertyValidator<T, TProperty>.Name
  fullName: FluentValidation.Validators.PropertyValidator<T, TProperty>.Name
  nameWithType.vb: PropertyValidator(Of T, TProperty).Name
  fullName.vb: FluentValidation.Validators.PropertyValidator(Of T, TProperty).Name
- uid: Innova.Data.Validation.AccountExistsValidator`2.Name*
  commentId: Overload:Innova.Data.Validation.AccountExistsValidator`2.Name
  href: Innova.Data.Validation.AccountExistsValidator-2.Name.html#Innova_Data_Validation_AccountExistsValidator_2_Name
  name: Name
  nameWithType: AccountExistsValidator<T, TProperty>.Name
  fullName: Innova.Data.Validation.AccountExistsValidator<T, TProperty>.Name
  nameWithType.vb: AccountExistsValidator(Of T, TProperty).Name
  fullName.vb: Innova.Data.Validation.AccountExistsValidator(Of T, TProperty).Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Innova.Data.Validation.AccountExistsValidator`2.GetDefaultMessageTemplate*
  commentId: Overload:Innova.Data.Validation.AccountExistsValidator`2.GetDefaultMessageTemplate
  href: Innova.Data.Validation.AccountExistsValidator-2.GetDefaultMessageTemplate.html#Innova_Data_Validation_AccountExistsValidator_2_GetDefaultMessageTemplate_System_String_
  name: GetDefaultMessageTemplate
  nameWithType: AccountExistsValidator<T, TProperty>.GetDefaultMessageTemplate
  fullName: Innova.Data.Validation.AccountExistsValidator<T, TProperty>.GetDefaultMessageTemplate
  nameWithType.vb: AccountExistsValidator(Of T, TProperty).GetDefaultMessageTemplate
  fullName.vb: Innova.Data.Validation.AccountExistsValidator(Of T, TProperty).GetDefaultMessageTemplate
- uid: Innova.Data.Validation.AccountExistsValidator`2.IsValid*
  commentId: Overload:Innova.Data.Validation.AccountExistsValidator`2.IsValid
  href: Innova.Data.Validation.AccountExistsValidator-2.IsValid.html#Innova_Data_Validation_AccountExistsValidator_2_IsValid_FluentValidation_ValidationContext__0___1_
  name: IsValid
  nameWithType: AccountExistsValidator<T, TProperty>.IsValid
  fullName: Innova.Data.Validation.AccountExistsValidator<T, TProperty>.IsValid
  nameWithType.vb: AccountExistsValidator(Of T, TProperty).IsValid
  fullName.vb: Innova.Data.Validation.AccountExistsValidator(Of T, TProperty).IsValid
- uid: FluentValidation.ValidationContext{{T}}
  commentId: T:FluentValidation.ValidationContext{`0}
  parent: FluentValidation
  definition: FluentValidation.ValidationContext`1
  name: ValidationContext<T>
  nameWithType: ValidationContext<T>
  fullName: FluentValidation.ValidationContext<T>
  nameWithType.vb: ValidationContext(Of T)
  fullName.vb: FluentValidation.ValidationContext(Of T)
  name.vb: ValidationContext(Of T)
  spec.csharp:
  - uid: FluentValidation.ValidationContext`1
    name: ValidationContext
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: FluentValidation.ValidationContext`1
    name: ValidationContext
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: '{TProperty}'
  commentId: '!:TProperty'
  definition: TProperty
  name: TProperty
  nameWithType: TProperty
  fullName: TProperty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: FluentValidation.ValidationContext`1
  commentId: T:FluentValidation.ValidationContext`1
  isExternal: true
  name: ValidationContext<T>
  nameWithType: ValidationContext<T>
  fullName: FluentValidation.ValidationContext<T>
  nameWithType.vb: ValidationContext(Of T)
  fullName.vb: FluentValidation.ValidationContext(Of T)
  name.vb: ValidationContext(Of T)
  spec.csharp:
  - uid: FluentValidation.ValidationContext`1
    name: ValidationContext
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: FluentValidation.ValidationContext`1
    name: ValidationContext
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: FluentValidation
  commentId: N:FluentValidation
  isExternal: true
  name: FluentValidation
  nameWithType: FluentValidation
  fullName: FluentValidation
- uid: TProperty
  commentId: '!:TProperty'
  name: TProperty
  nameWithType: TProperty
  fullName: TProperty
memberLayout: SeparatePages
